load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

# HACK(adamb) This is a weird way to expose the header file needed by libipfs.so.
#     we should be using some kind of output from go_binary, but it doesn't
#     seem to have one...
# cc_inc_library(
#     name = "ipfs.h",
#     hdrs = [
#       "_cgo_export.h",
#     ],
#     visibility = ["//visibility:public"],
# )

filegroup(
  name = "c_api_exports",
  srcs = [
    "_cgo_export.h",
    ":libipfs_internal.so",
  ],
  visibility = ["//iptf/cpp:__pkg__"],
)

# filegroup(
#   name = "c_api_exports",
#   srcs = [
#     ":libipfs_internal.so",
#     # ":c_api_library"
#   ],
#   output_group = "cgo_exports",
#   visibility = ["//visibility:public"],
# )

go_binary(
    name = "libipfs_internal.so",
    srcs = [
        "main.go",
    ],
    deps = [
      ":c_api_library",
    ],
    gc_linkopts=["-buildmode=c-shared"],
)

go_binary(
    name = "libipfs.so",
    srcs = [
        "main_autoinit.go",
    ],
    deps = [
        ":c_api_library",
        "//iptf/go/ipfsinit:go_default_library",
        "//iptf/go/root:go_default_library",
        "//iptf/go/filesys_wrap:go_default_library",
        "//iptf/go/filesys:go_default_library",
    ],
    gc_linkopts=["-buildmode=c-shared"],
    visibility = ["//visibility:public"],
)

go_library(
    cgo=True,
    name = "c_api_library",
    importpath = "github.com/ajbouh/iptf/c_api",
    srcs = [
        "new.go",
    ],
    deps = [
      "//iptf/go/ipfsinit:go_default_library",
      "//iptf/go/root:go_default_library",
      "//iptf/go/filesys_wrap:go_default_library",
    ],
)
